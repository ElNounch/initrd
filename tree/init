#!/bin/sh

# Create all the symlinks to /bin/busybox
/bin/busybox --install -s

# Mount things needed by this script
[ -d /dev ] || mkdir -m 0755 /dev
[ -d /var/run ] || mkdir -pm 0755 /var/run
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
mount -t sysfs -o nodev,noexec,nosuid none /sys
mount -t proc -o nodev,noexec,nosuid none /proc
mount -t devtmpfs -o mode=0755 none /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 none /dev/pts


# Loading functions
. /functions


# Signal to the console that the kernel is started
signal_state kernel-started


# Defaults
init="/sbin/init"
root="/dev/nbd0"
boot="local"
rootmnt="/newroot"

# Process command line options
for i in $(cat /proc/cmdline); do
    case "${i}" in
        root\=*)
            root=$(get_opt "${i}")
            ;;
        init\=*)
            init=$(get_opt "${i}")
            ;;
        boot\=*)
            boot=$(get_opt "${i}")
            ;;
    esac
done


# Import boot-type functions
case "${boot}" in
    local)
        . ./boot-nbd
        ;;
    rescue)
        . ./boot-rescue
        ;;
esac


# Mountroot
mountroot


# Signal to the console that the server is booted
signal_state booted


# Check if $init exists and is executable
if [[ -x "${rootmnt}/${init}" ]] ; then
    # Unmount all other mounts so that the ram used by
    # the initramfs can be cleared after switch_root
    umount /sys /proc

    # Switch to the new root and execute init
    exec switch_root "${rootmnt}" "${init}"
fi


# This will only be run if the exec above failed
echo "Failed to switch_root, dropping to a shell"
exec /bin/sh
