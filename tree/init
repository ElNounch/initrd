#!/bin/sh

# Create all the symlinks to /bin/busybox
/bin/busybox mkdir -p /bin /sbin /etc /proc /sys /newroot /usr/bin /usr/sbin
/bin/busybox --install -s


# Mount things needed by this script
[ -d /dev ] || mkdir -m 0755 /dev
[ -d /var/run ] || mkdir -pm 0755 /var/run
[ -d /sys ] || mkdir /sys
[ -d /proc ] || mkdir /proc
mount -t sysfs -o nodev,noexec,nosuid none /sys
mount -t proc -o nodev,noexec,nosuid none /proc
mount -t devtmpfs -o mode=0755 none /dev
mkdir /dev/pts
mount -t devpts -o noexec,nosuid,gid=5,mode=0620 none /dev/pts


# Loading functions
. /functions


# Initial /proc/cmdline parsing
export METADATA_IP=$(get_opt METADATA_IP 169.254.42.42)


# Configure network (if needed)
# FIXME: replace the following check with something stronger
if [ "$(cat /sys/class/net/eth0/operstate)" = "down" ]; then
    log_begin_msg "Configuring network"
    ifconfig eth0 up
    udhcpc -i eth0
    log_end_msg
fi


# Verbose mode
log_begin_msg "Checking user input for debug mode"
if [ "$(get_any INITRD_DEBUG)" = "1" ]; then
    log_success_msg "Enabling initrd debug"
    log_end_msg
    set -x
    env
else
    log_end_msg
fi


# Drop debug shell
log_begin_msg "Checking user input for debug shell"
if [ "$(get_any INITRD_PRE_SHELL)" = "1" ]; then
    log_success_msg "Dropping a debug shell"
    log_end_msg
    echo "**DEBUG SHELL** (requested from the user)"
    echo "To continue the initrd process, just type C^d"
    /bin/sh
else
    log_end_msg
fi


# Signal to the console that the kernel is started
signal_state kernel-started


# Adjust time
if [ "$(get_any NO_NTPDATE)" != "1" ]; then
    log_begin_msg "Adjusting time (ntp)"
    ntpdate -d -b -p 2 ntp.int.cloud.online.net >/dev/null
    ntpdate -d -b -p 6 ntp.int.cloud.online.net >/dev/null 2>/dev/null &
    log_end_msg
fi


# Defaults
init=$(get_any init "/sbin/init")
root=$(get_any root "/dev/nbd0")
boot=$(get_any boot "local")
rootmnt=$(get_any rootmnt "/newroot")


# Import boot-type functions
case "${boot}" in
    local)
        . ./boot-nbd
        ;;
    rescue)
        . ./boot-rescue
        ;;
esac


# Mountroot
mountroot


# Signal to the console that the server is booted
signal_state booted


# Prepare mount pseudo filesystem moving
mount -o move /proc ${rootmnt}/proc
mount -o move /sys ${rootmnt}/sys
mount -o move /run ${rootmnt}/run
mount -o move /dev ${rootmnt}/dev
[ -c ${rootmnt}/dev/console ] || mknod -m 622 ${rootmnt}/dev/console c 5 1
[ -c ${rootmnt}/dev/null ] || mknod -m 666 ${rootmnt}/dev/null c 1 3
[ -c ${rootmnt}/dev/zero ] || mknod -m 666 ${rootmnt}/dev/zero c 1 5
[ -c ${rootmnt}/dev/ptmx ] || mknod -m 666 ${rootmnt}/dev/ptmx c 5 2
[ -c ${rootmnt}/dev/tty ] || mknod -m 666 ${rootmnt}/dev/tty c 5 0
[ -c ${rootmnt}/dev/random ] || mknod -m 444 ${rootmnt}/dev/random c 1 8
[ -c ${rootmnt}/dev/urandom ] || mknod -m 444 ${rootmnt}/dev/urandom c 1 9
# chown -v root:tty /dev/{console,ptmx,tty}


# Drop debug shell
log_begin_msg "Checking metadata for debug shell"
if [ "$(get_any INITRD_POST_SHELL)" = "1" ]; then
    log_success_msg "Dropping a debug shell"
    log_end_msg
    echo "**DEBUG SHELL** (requested from the TAGS metadata of the server)"
    echo "To continue the initrd process, just type C^d"
    /bin/sh
else
    log_end_msg
fi


# Check if $init exists and is executable
if [[ -x "${rootmnt}/${init}" ]] ; then
    # Unmount all other mounts so that the ram used by
    # the initramfs can be cleared after switch_root
    # umount /sys /proc

    # Switch to the new root and execute init
    exec switch_root "${rootmnt}" "${init}"
fi


# This will only be run if the exec above failed
echo "Failed to switch_root, dropping to a shell"
exec /bin/sh
